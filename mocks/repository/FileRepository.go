// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/ngikut-project-sprint/TutupLapak-File/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// FileRepository is an autogenerated mock type for the FileRepository type
type FileRepository struct {
	mock.Mock
}

type FileRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *FileRepository) EXPECT() *FileRepository_Expecter {
	return &FileRepository_Expecter{mock: &_m.Mock}
}

// AddFile provides a mock function with given fields: ctx, file
func (_m *FileRepository) AddFile(ctx context.Context, file model.File) (uint, error) {
	ret := _m.Called(ctx, file)

	if len(ret) == 0 {
		panic("no return value specified for AddFile")
	}

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.File) (uint, error)); ok {
		return rf(ctx, file)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.File) uint); ok {
		r0 = rf(ctx, file)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.File) error); ok {
		r1 = rf(ctx, file)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FileRepository_AddFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddFile'
type FileRepository_AddFile_Call struct {
	*mock.Call
}

// AddFile is a helper method to define mock.On call
//   - ctx context.Context
//   - file model.File
func (_e *FileRepository_Expecter) AddFile(ctx interface{}, file interface{}) *FileRepository_AddFile_Call {
	return &FileRepository_AddFile_Call{Call: _e.mock.On("AddFile", ctx, file)}
}

func (_c *FileRepository_AddFile_Call) Run(run func(ctx context.Context, file model.File)) *FileRepository_AddFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.File))
	})
	return _c
}

func (_c *FileRepository_AddFile_Call) Return(_a0 uint, _a1 error) *FileRepository_AddFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FileRepository_AddFile_Call) RunAndReturn(run func(context.Context, model.File) (uint, error)) *FileRepository_AddFile_Call {
	_c.Call.Return(run)
	return _c
}

// NewFileRepository creates a new instance of FileRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFileRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *FileRepository {
	mock := &FileRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
