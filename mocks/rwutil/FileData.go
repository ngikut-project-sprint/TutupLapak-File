// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// FileData is an autogenerated mock type for the FileData type
type FileData struct {
	mock.Mock
}

type FileData_Expecter struct {
	mock *mock.Mock
}

func (_m *FileData) EXPECT() *FileData_Expecter {
	return &FileData_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *FileData) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FileData_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type FileData_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *FileData_Expecter) Close() *FileData_Close_Call {
	return &FileData_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *FileData_Close_Call) Run(run func()) *FileData_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FileData_Close_Call) Return(_a0 error) *FileData_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FileData_Close_Call) RunAndReturn(run func() error) *FileData_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields: p
func (_m *FileData) Read(p []byte) (int, error) {
	ret := _m.Called(p)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (int, error)); ok {
		return rf(p)
	}
	if rf, ok := ret.Get(0).(func([]byte) int); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FileData_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type FileData_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - p []byte
func (_e *FileData_Expecter) Read(p interface{}) *FileData_Read_Call {
	return &FileData_Read_Call{Call: _e.mock.On("Read", p)}
}

func (_c *FileData_Read_Call) Run(run func(p []byte)) *FileData_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *FileData_Read_Call) Return(n int, err error) *FileData_Read_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *FileData_Read_Call) RunAndReturn(run func([]byte) (int, error)) *FileData_Read_Call {
	_c.Call.Return(run)
	return _c
}

// ReadAt provides a mock function with given fields: p, off
func (_m *FileData) ReadAt(p []byte, off int64) (int, error) {
	ret := _m.Called(p, off)

	if len(ret) == 0 {
		panic("no return value specified for ReadAt")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte, int64) (int, error)); ok {
		return rf(p, off)
	}
	if rf, ok := ret.Get(0).(func([]byte, int64) int); ok {
		r0 = rf(p, off)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func([]byte, int64) error); ok {
		r1 = rf(p, off)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FileData_ReadAt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadAt'
type FileData_ReadAt_Call struct {
	*mock.Call
}

// ReadAt is a helper method to define mock.On call
//   - p []byte
//   - off int64
func (_e *FileData_Expecter) ReadAt(p interface{}, off interface{}) *FileData_ReadAt_Call {
	return &FileData_ReadAt_Call{Call: _e.mock.On("ReadAt", p, off)}
}

func (_c *FileData_ReadAt_Call) Run(run func(p []byte, off int64)) *FileData_ReadAt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].(int64))
	})
	return _c
}

func (_c *FileData_ReadAt_Call) Return(n int, err error) *FileData_ReadAt_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *FileData_ReadAt_Call) RunAndReturn(run func([]byte, int64) (int, error)) *FileData_ReadAt_Call {
	_c.Call.Return(run)
	return _c
}

// Seek provides a mock function with given fields: offset, whence
func (_m *FileData) Seek(offset int64, whence int) (int64, error) {
	ret := _m.Called(offset, whence)

	if len(ret) == 0 {
		panic("no return value specified for Seek")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int) (int64, error)); ok {
		return rf(offset, whence)
	}
	if rf, ok := ret.Get(0).(func(int64, int) int64); ok {
		r0 = rf(offset, whence)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(int64, int) error); ok {
		r1 = rf(offset, whence)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FileData_Seek_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Seek'
type FileData_Seek_Call struct {
	*mock.Call
}

// Seek is a helper method to define mock.On call
//   - offset int64
//   - whence int
func (_e *FileData_Expecter) Seek(offset interface{}, whence interface{}) *FileData_Seek_Call {
	return &FileData_Seek_Call{Call: _e.mock.On("Seek", offset, whence)}
}

func (_c *FileData_Seek_Call) Run(run func(offset int64, whence int)) *FileData_Seek_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int))
	})
	return _c
}

func (_c *FileData_Seek_Call) Return(_a0 int64, _a1 error) *FileData_Seek_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FileData_Seek_Call) RunAndReturn(run func(int64, int) (int64, error)) *FileData_Seek_Call {
	_c.Call.Return(run)
	return _c
}

// NewFileData creates a new instance of FileData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFileData(t interface {
	mock.TestingT
	Cleanup(func())
}) *FileData {
	mock := &FileData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
