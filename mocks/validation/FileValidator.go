// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	multipart "mime/multipart"

	mock "github.com/stretchr/testify/mock"
)

// FileValidator is an autogenerated mock type for the FileValidator type
type FileValidator struct {
	mock.Mock
}

type FileValidator_Expecter struct {
	mock *mock.Mock
}

func (_m *FileValidator) EXPECT() *FileValidator_Expecter {
	return &FileValidator_Expecter{mock: &_m.Mock}
}

// ValidateFile provides a mock function with given fields: fileHeader
func (_m *FileValidator) ValidateFile(fileHeader *multipart.FileHeader) error {
	ret := _m.Called(fileHeader)

	if len(ret) == 0 {
		panic("no return value specified for ValidateFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*multipart.FileHeader) error); ok {
		r0 = rf(fileHeader)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FileValidator_ValidateFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateFile'
type FileValidator_ValidateFile_Call struct {
	*mock.Call
}

// ValidateFile is a helper method to define mock.On call
//   - fileHeader *multipart.FileHeader
func (_e *FileValidator_Expecter) ValidateFile(fileHeader interface{}) *FileValidator_ValidateFile_Call {
	return &FileValidator_ValidateFile_Call{Call: _e.mock.On("ValidateFile", fileHeader)}
}

func (_c *FileValidator_ValidateFile_Call) Run(run func(fileHeader *multipart.FileHeader)) *FileValidator_ValidateFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*multipart.FileHeader))
	})
	return _c
}

func (_c *FileValidator_ValidateFile_Call) Return(_a0 error) *FileValidator_ValidateFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FileValidator_ValidateFile_Call) RunAndReturn(run func(*multipart.FileHeader) error) *FileValidator_ValidateFile_Call {
	_c.Call.Return(run)
	return _c
}

// NewFileValidator creates a new instance of FileValidator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFileValidator(t interface {
	mock.TestingT
	Cleanup(func())
}) *FileValidator {
	mock := &FileValidator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
