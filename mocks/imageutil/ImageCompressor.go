// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	bytes "bytes"
	image "image"

	mock "github.com/stretchr/testify/mock"
)

// ImageCompressor is an autogenerated mock type for the ImageCompressor type
type ImageCompressor struct {
	mock.Mock
}

type ImageCompressor_Expecter struct {
	mock *mock.Mock
}

func (_m *ImageCompressor) EXPECT() *ImageCompressor_Expecter {
	return &ImageCompressor_Expecter{mock: &_m.Mock}
}

// CompressImage provides a mock function with given fields: buffer, img, maxSize
func (_m *ImageCompressor) CompressImage(buffer *bytes.Buffer, img image.Image, maxSize int64) error {
	ret := _m.Called(buffer, img, maxSize)

	if len(ret) == 0 {
		panic("no return value specified for CompressImage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*bytes.Buffer, image.Image, int64) error); ok {
		r0 = rf(buffer, img, maxSize)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ImageCompressor_CompressImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompressImage'
type ImageCompressor_CompressImage_Call struct {
	*mock.Call
}

// CompressImage is a helper method to define mock.On call
//   - buffer *bytes.Buffer
//   - img image.Image
//   - maxSize int64
func (_e *ImageCompressor_Expecter) CompressImage(buffer interface{}, img interface{}, maxSize interface{}) *ImageCompressor_CompressImage_Call {
	return &ImageCompressor_CompressImage_Call{Call: _e.mock.On("CompressImage", buffer, img, maxSize)}
}

func (_c *ImageCompressor_CompressImage_Call) Run(run func(buffer *bytes.Buffer, img image.Image, maxSize int64)) *ImageCompressor_CompressImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bytes.Buffer), args[1].(image.Image), args[2].(int64))
	})
	return _c
}

func (_c *ImageCompressor_CompressImage_Call) Return(_a0 error) *ImageCompressor_CompressImage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ImageCompressor_CompressImage_Call) RunAndReturn(run func(*bytes.Buffer, image.Image, int64) error) *ImageCompressor_CompressImage_Call {
	_c.Call.Return(run)
	return _c
}

// NewImageCompressor creates a new instance of ImageCompressor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewImageCompressor(t interface {
	mock.TestingT
	Cleanup(func())
}) *ImageCompressor {
	mock := &ImageCompressor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
