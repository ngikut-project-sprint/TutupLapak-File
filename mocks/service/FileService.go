// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/ngikut-project-sprint/TutupLapak-File/internal/model"
	mock "github.com/stretchr/testify/mock"

	rwutil "github.com/ngikut-project-sprint/TutupLapak-File/internal/utils/rwutil"
)

// FileService is an autogenerated mock type for the FileService type
type FileService struct {
	mock.Mock
}

type FileService_Expecter struct {
	mock *mock.Mock
}

func (_m *FileService) EXPECT() *FileService_Expecter {
	return &FileService_Expecter{mock: &_m.Mock}
}

// AddFile provides a mock function with given fields: ctx, fileURI, fileThumbnailURI
func (_m *FileService) AddFile(ctx context.Context, fileURI string, fileThumbnailURI string) (uint, error) {
	ret := _m.Called(ctx, fileURI, fileThumbnailURI)

	if len(ret) == 0 {
		panic("no return value specified for AddFile")
	}

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (uint, error)); ok {
		return rf(ctx, fileURI, fileThumbnailURI)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) uint); ok {
		r0 = rf(ctx, fileURI, fileThumbnailURI)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, fileURI, fileThumbnailURI)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FileService_AddFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddFile'
type FileService_AddFile_Call struct {
	*mock.Call
}

// AddFile is a helper method to define mock.On call
//   - ctx context.Context
//   - fileURI string
//   - fileThumbnailURI string
func (_e *FileService_Expecter) AddFile(ctx interface{}, fileURI interface{}, fileThumbnailURI interface{}) *FileService_AddFile_Call {
	return &FileService_AddFile_Call{Call: _e.mock.On("AddFile", ctx, fileURI, fileThumbnailURI)}
}

func (_c *FileService_AddFile_Call) Run(run func(ctx context.Context, fileURI string, fileThumbnailURI string)) *FileService_AddFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *FileService_AddFile_Call) Return(_a0 uint, _a1 error) *FileService_AddFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FileService_AddFile_Call) RunAndReturn(run func(context.Context, string, string) (uint, error)) *FileService_AddFile_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateThumbnail provides a mock function with given fields: ctx, file, fileName, completion
func (_m *FileService) GenerateThumbnail(ctx context.Context, file rwutil.FileOpener, fileName string, completion chan model.Completion) {
	_m.Called(ctx, file, fileName, completion)
}

// FileService_GenerateThumbnail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateThumbnail'
type FileService_GenerateThumbnail_Call struct {
	*mock.Call
}

// GenerateThumbnail is a helper method to define mock.On call
//   - ctx context.Context
//   - file rwutil.FileOpener
//   - fileName string
//   - completion chan model.Completion
func (_e *FileService_Expecter) GenerateThumbnail(ctx interface{}, file interface{}, fileName interface{}, completion interface{}) *FileService_GenerateThumbnail_Call {
	return &FileService_GenerateThumbnail_Call{Call: _e.mock.On("GenerateThumbnail", ctx, file, fileName, completion)}
}

func (_c *FileService_GenerateThumbnail_Call) Run(run func(ctx context.Context, file rwutil.FileOpener, fileName string, completion chan model.Completion)) *FileService_GenerateThumbnail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(rwutil.FileOpener), args[2].(string), args[3].(chan model.Completion))
	})
	return _c
}

func (_c *FileService_GenerateThumbnail_Call) Return() *FileService_GenerateThumbnail_Call {
	_c.Call.Return()
	return _c
}

func (_c *FileService_GenerateThumbnail_Call) RunAndReturn(run func(context.Context, rwutil.FileOpener, string, chan model.Completion)) *FileService_GenerateThumbnail_Call {
	_c.Run(run)
	return _c
}

// UploadFile provides a mock function with given fields: ctx, file, fileName, completion
func (_m *FileService) UploadFile(ctx context.Context, file rwutil.FileOpener, fileName string, completion chan model.Completion) {
	_m.Called(ctx, file, fileName, completion)
}

// FileService_UploadFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadFile'
type FileService_UploadFile_Call struct {
	*mock.Call
}

// UploadFile is a helper method to define mock.On call
//   - ctx context.Context
//   - file rwutil.FileOpener
//   - fileName string
//   - completion chan model.Completion
func (_e *FileService_Expecter) UploadFile(ctx interface{}, file interface{}, fileName interface{}, completion interface{}) *FileService_UploadFile_Call {
	return &FileService_UploadFile_Call{Call: _e.mock.On("UploadFile", ctx, file, fileName, completion)}
}

func (_c *FileService_UploadFile_Call) Run(run func(ctx context.Context, file rwutil.FileOpener, fileName string, completion chan model.Completion)) *FileService_UploadFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(rwutil.FileOpener), args[2].(string), args[3].(chan model.Completion))
	})
	return _c
}

func (_c *FileService_UploadFile_Call) Return() *FileService_UploadFile_Call {
	_c.Call.Return()
	return _c
}

func (_c *FileService_UploadFile_Call) RunAndReturn(run func(context.Context, rwutil.FileOpener, string, chan model.Completion)) *FileService_UploadFile_Call {
	_c.Run(run)
	return _c
}

// NewFileService creates a new instance of FileService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFileService(t interface {
	mock.TestingT
	Cleanup(func())
}) *FileService {
	mock := &FileService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
